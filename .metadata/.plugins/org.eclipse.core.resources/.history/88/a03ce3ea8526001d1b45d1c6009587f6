#include "servidor.h"

t_log *sv_logger;

int main(void) {
	char *ip, *puerto;
	int server_fd, cliente_fd;

	inicializar_modulo(ip, puerto);
	server_fd = inicializar_sv(ip, puerto);
	cliente_fd = esperar_cliente(server_fd);

	return EXIT_SUCCESS;
}

void inicializar_modulo(char *ip, char *puerto) {
	t_config *confile;

	sv_logger = log_create("sv.log", "SERVIDOR", true, LOG_LEVEL_TRACE);
	confile = config_create("conexion.config");

	log_trace(sv_logger, "logger inizializado");
	log_trace(sv_logger, "config inizializado");

	ip = config_get_string_value(confile, "IP");
	puerto = config_get_string_value(confile, "PUERTO");

	log_debug(sv_logger, "ip: %s", ip);
	log_debug(sv_logger, "puerto: %s", puerto);
}

int inicializar_sv(char *ip, char *puerto) {
	int socket_escucha;
	struct addrinfo entrada, *sv;

	memset(&entrada, 0, sizeof(entrada));
	entrada.ai_family = AF_INET;
	entrada.ai_socktype = SOCK_STREAM;
	entrada.ai_flags = AI_PASSIVE;

	getaddrinfo(ip, puerto, &entrada, &sv);

	socket_escucha = socket(sv->ai_family, sv->ai_socktype, sv->ai_protocol);

	if(socket_escucha < 0) {
		log_info(sv_logger, "No se ha podido iniciar el socket");
		exit(EXIT_FAILURE);
	}

	log_trace(sv_logger, "Se ha creado el socket pasivo");

	if(bind(socket_escucha, sv->ai_addr, sv->ai_addrlen) < 0) {
		log_info(sv_logger, "No se ha podido iniciar el socket");
		exit(EXIT_FAILURE);
	}

	log_trace(sv_logger, "Se ha asignado el puerto: %s", puerto);

	listen(socket_escucha, MAX_CON);

	log_info(sv_logger, "Servidor escuchando en el IP: %s PUERTO: %s", ip, puerto);

	return socket_escucha;
}
