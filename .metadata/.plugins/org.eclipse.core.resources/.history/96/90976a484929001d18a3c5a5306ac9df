#include "../shared/shared.h"

t_log* logger;

void leer_config(char **ip, char **puerto) {
	char *ip_aux, *puerto_aux;
	t_config *confile;
	confile = config_create("conexion.config");

	log_trace(logger, "logger inizializado");
	log_trace(logger, "config inizializado");

	*ip = config_get_string_value(confile, "IP");
	*puerto = config_get_string_value(confile, "PUERTO");

	log_debug(logger, "ip: %s", *ip);
	log_debug(logger, "puerto: %s", *puerto);
}

int iniciar_sv(char *ip, char *puerto) {
	int socket_escucha;
	struct addrinfo entrada, *sv;

	memset(&entrada, 0, sizeof(entrada));
	entrada.ai_family = AF_INET;
	entrada.ai_socktype = SOCK_STREAM;
	entrada.ai_flags = AI_PASSIVE;

	getaddrinfo(ip, puerto, &entrada, &sv);

	socket_escucha = socket(sv->ai_family, sv->ai_socktype, sv->ai_protocol);

	if(socket_escucha == -1) {
		log_info(logger, "No se ha podido iniciar el socket");
		exit(EXIT_FAILURE);
	}

	log_trace(logger, "Se ha creado el socket pasivo");

	if(bind(socket_escucha, sv->ai_addr, sv->ai_addrlen) == -1) {
		log_info(logger, "No se ha podido iniciar el socket");
		exit(EXIT_FAILURE);
	}

	freeaddrinfo(sv);

	log_trace(logger, "Se ha asignado el puerto: %s", puerto);

	if(listen(socket_escucha, MAX_CON) == -1) {
		log_info(logger, "No se ha podido habilitar el socket para recibir conexiones");
		exit(EXIT_FAILURE);
	}

	log_info(logger, "Servidor escuchando en el IP: %s PUERTO: %s", ip, puerto);

	return socket_escucha;
}
