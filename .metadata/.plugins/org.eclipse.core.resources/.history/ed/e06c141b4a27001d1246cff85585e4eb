#include "servidor.h"

t_log *logger;

int main(void) {
	char *ip, *puerto;
	int server_fd, cliente_fd;

	logger = log_create("sv.log", "SERVIDOR", true, LOG_LEVEL_TRACE);
	leer_config(ip, puerto);
	server_fd = inicializar_sv(ip, puerto);
	cliente_fd = esperar_cliente(server_fd);

	return EXIT_SUCCESS;
}

int inicializar_sv(char *ip, char *puerto) {
	int socket_escucha;
	struct addrinfo entrada, *sv;

	memset(&entrada, 0, sizeof(entrada));
	entrada.ai_family = AF_INET;
	entrada.ai_socktype = SOCK_STREAM;
	entrada.ai_flags = AI_PASSIVE;

	getaddrinfo(ip, puerto, &entrada, &sv);

	socket_escucha = socket(sv->ai_family, sv->ai_socktype, sv->ai_protocol);

	if(socket_escucha < 0) {
		log_info(logger, "No se ha podido iniciar el socket");
		exit(EXIT_FAILURE);
	}

	log_trace(logger, "Se ha creado el socket pasivo");

	if(bind(socket_escucha, sv->ai_addr, sv->ai_addrlen) < 0) {
		log_info(logger, "No se ha podido iniciar el socket");
		exit(EXIT_FAILURE);
	}

	freeadrinfo(sv);

	log_trace(logger, "Se ha asignado el puerto: %s", puerto);

	listen(socket_escucha, MAX_CON);

	log_info(logger, "Servidor escuchando en el IP: %s PUERTO: %s", ip, puerto);

	return socket_escucha;
}

int esperar_cliente(int server_fd) {
	struct addrinfo cliente;

	int cl_size = sizeof(cliente);
	int cliente_fd = accept(server_fd, &cliente, &cl_size);
	log_info(logger, "Se ha conectado un cliiente");

	return cliente_fd;
}
